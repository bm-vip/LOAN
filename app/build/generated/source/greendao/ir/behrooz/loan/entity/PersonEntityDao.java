package ir.behrooz.loan.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Person".
*/
public class PersonEntityDao extends AbstractDao<PersonEntity, Long> {

    public static final String TABLENAME = "Person";

    /**
     * Properties of entity PersonEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NationalCode = new Property(1, String.class, "nationalCode", false, "NATIONAL_CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Family = new Property(3, String.class, "family", false, "FAMILY");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property CashId = new Property(5, Long.class, "cashId", false, "CASH_ID");
    }


    public PersonEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PersonEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Person\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NATIONAL_CODE\" TEXT," + // 1: nationalCode
                "\"NAME\" TEXT," + // 2: name
                "\"FAMILY\" TEXT," + // 3: family
                "\"PHONE\" TEXT," + // 4: phone
                "\"CASH_ID\" INTEGER);"); // 5: cashId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Person\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nationalCode = entity.getNationalCode();
        if (nationalCode != null) {
            stmt.bindString(2, nationalCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(4, family);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        Long cashId = entity.getCashId();
        if (cashId != null) {
            stmt.bindLong(6, cashId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nationalCode = entity.getNationalCode();
        if (nationalCode != null) {
            stmt.bindString(2, nationalCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(4, family);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        Long cashId = entity.getCashId();
        if (cashId != null) {
            stmt.bindLong(6, cashId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PersonEntity readEntity(Cursor cursor, int offset) {
        PersonEntity entity = new PersonEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nationalCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // family
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // cashId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNationalCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFamily(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCashId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PersonEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PersonEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
