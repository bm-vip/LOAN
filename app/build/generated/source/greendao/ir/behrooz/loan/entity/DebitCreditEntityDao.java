package ir.behrooz.loan.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DebitCredit".
*/
public class DebitCreditEntityDao extends AbstractDao<DebitCreditEntity, Long> {

    public static final String TABLENAME = "DebitCredit";

    /**
     * Properties of entity DebitCreditEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PayStatus = new Property(1, boolean.class, "payStatus", false, "PAY_STATUS");
        public final static Property Value = new Property(2, Long.class, "value", false, "VALUE");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property PersonId = new Property(4, Long.class, "personId", false, "PERSON_ID");
        public final static Property LoanId = new Property(5, Long.class, "loanId", false, "LOAN_ID");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property CashId = new Property(7, Long.class, "cashId", false, "CASH_ID");
    }


    public DebitCreditEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DebitCreditEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DebitCredit\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PAY_STATUS\" INTEGER NOT NULL ," + // 1: payStatus
                "\"VALUE\" INTEGER," + // 2: value
                "\"DATE\" INTEGER," + // 3: date
                "\"PERSON_ID\" INTEGER," + // 4: personId
                "\"LOAN_ID\" INTEGER," + // 5: loanId
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"CASH_ID\" INTEGER);"); // 7: cashId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DebitCredit\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DebitCreditEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPayStatus() ? 1L: 0L);
 
        Long value = entity.getValue();
        if (value != null) {
            stmt.bindLong(3, value);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(5, personId);
        }
 
        Long loanId = entity.getLoanId();
        if (loanId != null) {
            stmt.bindLong(6, loanId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        Long cashId = entity.getCashId();
        if (cashId != null) {
            stmt.bindLong(8, cashId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DebitCreditEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPayStatus() ? 1L: 0L);
 
        Long value = entity.getValue();
        if (value != null) {
            stmt.bindLong(3, value);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(5, personId);
        }
 
        Long loanId = entity.getLoanId();
        if (loanId != null) {
            stmt.bindLong(6, loanId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        Long cashId = entity.getCashId();
        if (cashId != null) {
            stmt.bindLong(8, cashId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DebitCreditEntity readEntity(Cursor cursor, int offset) {
        DebitCreditEntity entity = new DebitCreditEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // payStatus
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // value
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // personId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // loanId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // cashId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DebitCreditEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPayStatus(cursor.getShort(offset + 1) != 0);
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setPersonId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLoanId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCashId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DebitCreditEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DebitCreditEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DebitCreditEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
